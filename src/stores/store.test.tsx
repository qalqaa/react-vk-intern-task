import Store from './store';
import { fetchData } from '../data/api';

jest.mock('../data/api');

describe('Store', () => {
  let store: typeof Store;

  beforeEach(() => {
    store = Store;
  });

  it('should initialize with default values', () => {
    expect(store.items).toEqual([]);
    expect(store.sort).toBe('stars');
    expect(store.currentPage).toBe(1);
    expect(store.loading).toBe(false);
    expect(store.error).toBeNull();
    expect(store.itemsPerPage).toBe(30);
    expect(store.accessToken).toBeNull();
  });

  it('should toggle loading state', () => {
    store.toggleLoading();
    expect(store.loading).toBe(true);
    store.toggleLoading();
    expect(store.loading).toBe(false);
  });

  it('should set new items correctly', () => {
    const newItems = [
      {
        id: 1,
        node_id: 'abc123',
        name: 'Item 1',
        full_name: 'Item 1 Full Name',
        private: false,
        owner: {
          login: 'user1',
          id: 1,
          node_id: 'owner123',
          avatar_url: '',
          gravatar_id: '',
          url: '',
          html_url: '',
          followers_url: '',
          following_url: '',
          gists_url: '',
          starred_url: '',
          subscriptions_url: '',
          organizations_url: '',
          repos_url: '',
          events_url: '',
          received_events_url: '',
          type: 'user',
          user_view_type: 'view',
          site_admin: false,
        },
        html_url: 'https://github.com/item1',
        description: 'Description',
        fork: false,
        url: 'https://api.github.com/repos/item1',
        forks_url: '',
        keys_url: '',
        collaborators_url: '',
        teams_url: '',
        hooks_url: '',
        issue_events_url: '',
        events_url: '',
        assignees_url: '',
        branches_url: '',
        tags_url: '',
        blobs_url: '',
        git_tags_url: '',
        git_refs_url: '',
        trees_url: '',
        statuses_url: '',
        languages_url: '',
        stargazers_url: '',
        contributors_url: '',
        subscribers_url: '',
        subscription_url: '',
        commits_url: '',
        git_commits_url: '',
        comments_url: '',
        issue_comment_url: '',
        contents_url: '',
        compare_url: '',
        merges_url: '',
        archive_url: '',
        downloads_url: '',
        issues_url: '',
        pulls_url: '',
        milestones_url: '',
        notifications_url: '',
        labels_url: '',
        releases_url: '',
        deployments_url: '',
        created_at: new Date(),
        updated_at: new Date(),
        pushed_at: new Date(),
        git_url: '',
        ssh_url: '',
        clone_url: '',
        svn_url: '',
        homepage: null,
        size: 123,
        stargazers_count: 100,
        watchers_count: 50,
        language: 'JavaScript',
        has_issues: true,
        has_projects: true,
        has_downloads: true,
        has_wiki: true,
        has_pages: true,
        has_discussions: false,
        forks_count: 10,
        mirror_url: null,
        archived: false,
        disabled: false,
        open_issues_count: 2,
        license: null,
        allow_forking: true,
        is_template: false,
        web_commit_signoff_required: false,
        topics: ['JavaScript', 'Open Source'],
        visibility: 'public',
        forks: 10,
        open_issues: 2,
        watchers: 50,
        default_branch: 'main',
        score: 10,
      },
    ];
    store.setNewItems(newItems);
    expect(store.items).toEqual(newItems);
  });

  it('should throw error message correctly', async () => {
    const errorMessage = 'Network error';
    (fetchData as jest.Mock).mockRejectedValue(new Error(errorMessage));

    await store.fetchItems();
    expect(store.error).toBe(`Error: Error: ${errorMessage}`);
    expect(store.loading).toBe(false);
  });

  it('should set an error message correctly', () => {
    store.currentPage = 1;
    store.setError('Some error occurred');
    expect(store.error).toBe('Some error occurred');
  });

  it('should set access token correctly', () => {
    const token = 'newAccessToken';
    expect(store.accessToken).toBeNull();

    store.setAccessToken(token);

    expect(store.accessToken).toBe(token);
  });

  it('should set the sort option and fetch new items', async () => {
    const mockItems = [
      {
        id: 1,
        name: 'Item 1',
        owner: { login: 'user1' },
        description: 'Description',
      },
    ];
    (fetchData as jest.Mock).mockResolvedValue(mockItems);

    store.setSort('forks');

    expect(fetchData).toHaveBeenCalledWith(1, 30, 'forks');
    expect(store.currentPage).toBe(1);
  });

  it('should handle error when fetching items', async () => {
    await store.fetchItems();

    expect(store.error).toBe('Some error occurred');
    expect(store.loading).toBe(false);
  });

  it('should remove item correctly', () => {
    const initialItems = [
      {
        id: 1,
        node_id: 'abc121312323',
        name: 'Item 1',
        full_name: 'Item 1 Full Name',
        private: false,
        owner: {
          login: 'user1',
          id: 1,
          node_id: 'owner123',
          avatar_url: '',
          gravatar_id: '',
          url: '',
          html_url: '',
          followers_url: '',
          following_url: '',
          gists_url: '',
          starred_url: '',
          subscriptions_url: '',
          organizations_url: '',
          repos_url: '',
          events_url: '',
          received_events_url: '',
          type: 'user',
          user_view_type: 'view',
          site_admin: false,
        },
        html_url: 'https://github.com/item1',
        description: 'Description',
        fork: false,
        url: 'https://api.github.com/repos/item1',
        forks_url: '',
        keys_url: '',
        collaborators_url: '',
        teams_url: '',
        hooks_url: '',
        issue_events_url: '',
        events_url: '',
        assignees_url: '',
        branches_url: '',
        tags_url: '',
        blobs_url: '',
        git_tags_url: '',
        git_refs_url: '',
        trees_url: '',
        statuses_url: '',
        languages_url: '',
        stargazers_url: '',
        contributors_url: '',
        subscribers_url: '',
        subscription_url: '',
        commits_url: '',
        git_commits_url: '',
        comments_url: '',
        issue_comment_url: '',
        contents_url: '',
        compare_url: '',
        merges_url: '',
        archive_url: '',
        downloads_url: '',
        issues_url: '',
        pulls_url: '',
        milestones_url: '',
        notifications_url: '',
        labels_url: '',
        releases_url: '',
        deployments_url: '',
        created_at: new Date(),
        updated_at: new Date(),
        pushed_at: new Date(),
        git_url: '',
        ssh_url: '',
        clone_url: '',
        svn_url: '',
        homepage: null,
        size: 123,
        stargazers_count: 100,
        watchers_count: 50,
        language: 'JavaScript',
        has_issues: true,
        has_projects: true,
        has_downloads: true,
        has_wiki: true,
        has_pages: true,
        has_discussions: false,
        forks_count: 10,
        mirror_url: null,
        archived: false,
        disabled: false,
        open_issues_count: 2,
        license: null,
        allow_forking: true,
        is_template: false,
        web_commit_signoff_required: false,
        topics: ['JavaScript', 'Open Source'],
        visibility: 'public',
        forks: 10,
        open_issues: 2,
        watchers: 50,
        default_branch: 'main',
        score: 10,
      },
      {
        id: 2,
        node_id: 'abcddd123',
        name: 'Item 1',
        full_name: 'Item 1 Full Name',
        private: false,
        owner: {
          login: 'user1',
          id: 1,
          node_id: 'owner123',
          avatar_url: '',
          gravatar_id: '',
          url: '',
          html_url: '',
          followers_url: '',
          following_url: '',
          gists_url: '',
          starred_url: '',
          subscriptions_url: '',
          organizations_url: '',
          repos_url: '',
          events_url: '',
          received_events_url: '',
          type: 'user',
          user_view_type: 'view',
          site_admin: false,
        },
        html_url: 'https://github.com/item1',
        description: 'Description',
        fork: false,
        url: 'https://api.github.com/repos/item1',
        forks_url: '',
        keys_url: '',
        collaborators_url: '',
        teams_url: '',
        hooks_url: '',
        issue_events_url: '',
        events_url: '',
        assignees_url: '',
        branches_url: '',
        tags_url: '',
        blobs_url: '',
        git_tags_url: '',
        git_refs_url: '',
        trees_url: '',
        statuses_url: '',
        languages_url: '',
        stargazers_url: '',
        contributors_url: '',
        subscribers_url: '',
        subscription_url: '',
        commits_url: '',
        git_commits_url: '',
        comments_url: '',
        issue_comment_url: '',
        contents_url: '',
        compare_url: '',
        merges_url: '',
        archive_url: '',
        downloads_url: '',
        issues_url: '',
        pulls_url: '',
        milestones_url: '',
        notifications_url: '',
        labels_url: '',
        releases_url: '',
        deployments_url: '',
        created_at: new Date('2022-11-16T05:58:46Z'),
        updated_at: new Date('2022-11-16T05:58:46Z'),
        pushed_at: new Date('2022-11-16T05:58:46Z'),
        git_url: '',
        ssh_url: '',
        clone_url: '',
        svn_url: '',
        homepage: null,
        size: 123,
        stargazers_count: 100,
        watchers_count: 50,
        language: 'JavaScript',
        has_issues: true,
        has_projects: true,
        has_downloads: true,
        has_wiki: true,
        has_pages: true,
        has_discussions: false,
        forks_count: 10,
        mirror_url: null,
        archived: false,
        disabled: false,
        open_issues_count: 2,
        license: null,
        allow_forking: true,
        is_template: false,
        web_commit_signoff_required: false,
        topics: ['JavaScript', 'Open Source'],
        visibility: 'public',
        forks: 10,
        open_issues: 2,
        watchers: 50,
        default_branch: 'main',
        score: 10,
      },
    ];
    store.setNewItems(initialItems);

    store.removeItem(1);

    expect(store.items).toEqual([
      {
        id: 2,
        node_id: 'abcddd123',
        name: 'Item 1',
        full_name: 'Item 1 Full Name',
        private: false,
        owner: {
          login: 'user1',
          id: 1,
          node_id: 'owner123',
          avatar_url: '',
          gravatar_id: '',
          url: '',
          html_url: '',
          followers_url: '',
          following_url: '',
          gists_url: '',
          starred_url: '',
          subscriptions_url: '',
          organizations_url: '',
          repos_url: '',
          events_url: '',
          received_events_url: '',
          type: 'user',
          user_view_type: 'view',
          site_admin: false,
        },
        html_url: 'https://github.com/item1',
        description: 'Description',
        fork: false,
        url: 'https://api.github.com/repos/item1',
        forks_url: '',
        keys_url: '',
        collaborators_url: '',
        teams_url: '',
        hooks_url: '',
        issue_events_url: '',
        events_url: '',
        assignees_url: '',
        branches_url: '',
        tags_url: '',
        blobs_url: '',
        git_tags_url: '',
        git_refs_url: '',
        trees_url: '',
        statuses_url: '',
        languages_url: '',
        stargazers_url: '',
        contributors_url: '',
        subscribers_url: '',
        subscription_url: '',
        commits_url: '',
        git_commits_url: '',
        comments_url: '',
        issue_comment_url: '',
        contents_url: '',
        compare_url: '',
        merges_url: '',
        archive_url: '',
        downloads_url: '',
        issues_url: '',
        pulls_url: '',
        milestones_url: '',
        notifications_url: '',
        labels_url: '',
        releases_url: '',
        deployments_url: '',
        created_at: new Date('2022-11-16T05:58:46Z'),
        updated_at: new Date('2022-11-16T05:58:46Z'),
        pushed_at: new Date('2022-11-16T05:58:46Z'),
        git_url: '',
        ssh_url: '',
        clone_url: '',
        svn_url: '',
        homepage: null,
        size: 123,
        stargazers_count: 100,
        watchers_count: 50,
        language: 'JavaScript',
        has_issues: true,
        has_projects: true,
        has_downloads: true,
        has_wiki: true,
        has_pages: true,
        has_discussions: false,
        forks_count: 10,
        mirror_url: null,
        archived: false,
        disabled: false,
        open_issues_count: 2,
        license: null,
        allow_forking: true,
        is_template: false,
        web_commit_signoff_required: false,
        topics: ['JavaScript', 'Open Source'],
        visibility: 'public',
        forks: 10,
        open_issues: 2,
        watchers: 50,
        default_branch: 'main',
        score: 10,
      },
    ]);
  });

  it('should update an item correctly', () => {
    const initialItems = [
      {
        id: 99,
        node_id: 'abc123',
        name: 'Old Name',
        full_name: 'Old Full Name',
        private: false,
        owner: {
          login: 'oldOwner',
          id: 1,
          node_id: 'owner123',
          avatar_url: '',
          gravatar_id: '',
          url: '',
          html_url: '',
          followers_url: '',
          following_url: '',
          gists_url: '',
          starred_url: '',
          subscriptions_url: '',
          organizations_url: '',
          repos_url: '',
          events_url: '',
          received_events_url: '',
          type: 'user',
          user_view_type: 'view',
          site_admin: false,
        },
        html_url: 'https://github.com/item1',
        description: 'Old description',
        fork: false,
        url: 'https://api.github.com/repos/item1',
        forks_url: '',
        keys_url: '',
        collaborators_url: '',
        teams_url: '',
        hooks_url: '',
        issue_events_url: '',
        events_url: '',
        assignees_url: '',
        branches_url: '',
        tags_url: '',
        blobs_url: '',
        git_tags_url: '',
        git_refs_url: '',
        trees_url: '',
        statuses_url: '',
        languages_url: '',
        stargazers_url: '',
        contributors_url: '',
        subscribers_url: '',
        subscription_url: '',
        commits_url: '',
        git_commits_url: '',
        comments_url: '',
        issue_comment_url: '',
        contents_url: '',
        compare_url: '',
        merges_url: '',
        archive_url: '',
        downloads_url: '',
        issues_url: '',
        pulls_url: '',
        milestones_url: '',
        notifications_url: '',
        labels_url: '',
        releases_url: '',
        deployments_url: '',
        created_at: new Date(),
        updated_at: new Date(),
        pushed_at: new Date(),
        git_url: '',
        ssh_url: '',
        clone_url: '',
        svn_url: '',
        homepage: null,
        size: 123,
        stargazers_count: 100,
        watchers_count: 50,
        language: 'JavaScript',
        has_issues: true,
        has_projects: true,
        has_downloads: true,
        has_wiki: true,
        has_pages: true,
        has_discussions: false,
        forks_count: 10,
        mirror_url: null,
        archived: false,
        disabled: false,
        open_issues_count: 2,
        license: null,
        allow_forking: true,
        is_template: false,
        web_commit_signoff_required: false,
        topics: ['JavaScript', 'Open Source'],
        visibility: 'public',
        forks: 10,
        open_issues: 2,
        watchers: 50,
        default_branch: 'main',
        score: 10,
      },
    ];
    store.items = [];
    store.setNewItems(initialItems);

    const updatedItem = {
      name: 'Updated Name',
      ownerName: 'newOwner',
      description: 'Updated description',
    };
    store.updateItem(99, updatedItem);

    expect(store.items[0].name).toBe(updatedItem.name);
    expect(store.items[0].owner.login).toBe(updatedItem.ownerName);
    expect(store.items[0].description).toBe(updatedItem.description);
  });
});
